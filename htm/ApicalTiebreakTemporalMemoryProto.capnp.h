// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ApicalTiebreakTemporalMemoryProto.capnp

#ifndef CAPNP_INCLUDED_e6601be8ebc25c9b_
#define CAPNP_INCLUDED_e6601be8ebc25c9b_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <nupic/proto/ConnectionsProto.capnp.h>
#include <nupic/proto/RandomProto.capnp.h>

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(97f4ee52b4488d2b);
CAPNP_DECLARE_SCHEMA(bc7eeb3ce2615b8d);
CAPNP_DECLARE_SCHEMA(88dfed7ca63763db);
CAPNP_DECLARE_SCHEMA(cb99b28b4b576efd);
CAPNP_DECLARE_SCHEMA(e34b8fb862015165);
CAPNP_DECLARE_SCHEMA(fe7dfbacf20fd1a2);

}  // namespace schemas
}  // namespace capnp


struct ApicalTiebreakTemporalMemoryProto {
  ApicalTiebreakTemporalMemoryProto() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct SegmentPath;
  struct SegmentUInt32Pair;
  struct SegmentUInt64Pair;
  struct ChosenCellPair;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97f4ee52b4488d2b, 9, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ApicalTiebreakTemporalMemoryProto::SegmentPath {
  SegmentPath() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc7eeb3ce2615b8d, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair {
  SegmentUInt32Pair() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88dfed7ca63763db, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair {
  SegmentUInt64Pair() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb99b28b4b576efd, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ApicalTiebreakTemporalMemoryProto::ChosenCellPair {
  ChosenCellPair() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e34b8fb862015165, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ApicalTiebreakSequenceMemoryProto {
  ApicalTiebreakSequenceMemoryProto() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fe7dfbacf20fd1a2, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ApicalTiebreakTemporalMemoryProto::Reader {
public:
  typedef ApicalTiebreakTemporalMemoryProto Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getColumnCount() const;

  inline  ::uint32_t getCellsPerColumn() const;

  inline  ::uint32_t getActivationThreshold() const;

  inline float getInitialPermanence() const;

  inline float getConnectedPermanence() const;

  inline  ::uint32_t getMinThreshold() const;

  inline  ::uint32_t getSampleSize() const;

  inline float getPermanenceIncrement() const;

  inline float getPermanenceDecrement() const;

  inline float getBasalPredictedSegmentDecrement() const;

  inline  ::uint16_t getMaxSegmentsPerCell() const;

  inline  ::uint16_t getMaxSynapsesPerSegment() const;

  inline bool getFormInternalBasalConnections() const;

  inline bool hasBasalConnections() const;
  inline  ::ConnectionsProto::Reader getBasalConnections() const;

  inline bool hasApicalConnections() const;
  inline  ::ConnectionsProto::Reader getApicalConnections() const;

  inline bool hasRandom() const;
  inline  ::RandomProto::Reader getRandom() const;

  inline bool hasActiveCells() const;
  inline  ::capnp::List< ::uint32_t>::Reader getActiveCells() const;

  inline bool hasWinnerCells() const;
  inline  ::capnp::List< ::uint32_t>::Reader getWinnerCells() const;

  inline bool hasPredictedActiveCells() const;
  inline  ::capnp::List< ::uint32_t>::Reader getPredictedActiveCells() const;

  inline bool hasActiveBasalSegments() const;
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader getActiveBasalSegments() const;

  inline bool hasMatchingBasalSegments() const;
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader getMatchingBasalSegments() const;

  inline bool hasActiveApicalSegments() const;
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader getActiveApicalSegments() const;

  inline bool hasMatchingApicalSegments() const;
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader getMatchingApicalSegments() const;

  inline bool hasNumActivePotentialSynapsesForBasalSegment() const;
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Reader getNumActivePotentialSynapsesForBasalSegment() const;

  inline bool hasNumActivePotentialSynapsesForApicalSegment() const;
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Reader getNumActivePotentialSynapsesForApicalSegment() const;

  inline  ::uint64_t getIteration() const;

  inline bool hasLastUsedIterationForBasalSegment() const;
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Reader getLastUsedIterationForBasalSegment() const;

  inline bool hasLastUsedIterationForApicalSegment() const;
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Reader getLastUsedIterationForApicalSegment() const;

  inline bool getLearnOnOneCell() const;

  inline bool hasChosenCellForColumn() const;
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>::Reader getChosenCellForColumn() const;

  inline bool hasPredictedCells() const;
  inline  ::capnp::List< ::uint32_t>::Reader getPredictedCells() const;

  inline  ::uint32_t getBasalInputSize() const;

  inline  ::uint32_t getApicalInputSize() const;

  inline float getApicalPredictedSegmentDecrement() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ApicalTiebreakTemporalMemoryProto::Builder {
public:
  typedef ApicalTiebreakTemporalMemoryProto Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getColumnCount();
  inline void setColumnCount( ::uint32_t value);

  inline  ::uint32_t getCellsPerColumn();
  inline void setCellsPerColumn( ::uint32_t value);

  inline  ::uint32_t getActivationThreshold();
  inline void setActivationThreshold( ::uint32_t value);

  inline float getInitialPermanence();
  inline void setInitialPermanence(float value);

  inline float getConnectedPermanence();
  inline void setConnectedPermanence(float value);

  inline  ::uint32_t getMinThreshold();
  inline void setMinThreshold( ::uint32_t value);

  inline  ::uint32_t getSampleSize();
  inline void setSampleSize( ::uint32_t value);

  inline float getPermanenceIncrement();
  inline void setPermanenceIncrement(float value);

  inline float getPermanenceDecrement();
  inline void setPermanenceDecrement(float value);

  inline float getBasalPredictedSegmentDecrement();
  inline void setBasalPredictedSegmentDecrement(float value);

  inline  ::uint16_t getMaxSegmentsPerCell();
  inline void setMaxSegmentsPerCell( ::uint16_t value);

  inline  ::uint16_t getMaxSynapsesPerSegment();
  inline void setMaxSynapsesPerSegment( ::uint16_t value);

  inline bool getFormInternalBasalConnections();
  inline void setFormInternalBasalConnections(bool value);

  inline bool hasBasalConnections();
  inline  ::ConnectionsProto::Builder getBasalConnections();
  inline void setBasalConnections( ::ConnectionsProto::Reader value);
  inline  ::ConnectionsProto::Builder initBasalConnections();
  inline void adoptBasalConnections(::capnp::Orphan< ::ConnectionsProto>&& value);
  inline ::capnp::Orphan< ::ConnectionsProto> disownBasalConnections();

  inline bool hasApicalConnections();
  inline  ::ConnectionsProto::Builder getApicalConnections();
  inline void setApicalConnections( ::ConnectionsProto::Reader value);
  inline  ::ConnectionsProto::Builder initApicalConnections();
  inline void adoptApicalConnections(::capnp::Orphan< ::ConnectionsProto>&& value);
  inline ::capnp::Orphan< ::ConnectionsProto> disownApicalConnections();

  inline bool hasRandom();
  inline  ::RandomProto::Builder getRandom();
  inline void setRandom( ::RandomProto::Reader value);
  inline  ::RandomProto::Builder initRandom();
  inline void adoptRandom(::capnp::Orphan< ::RandomProto>&& value);
  inline ::capnp::Orphan< ::RandomProto> disownRandom();

  inline bool hasActiveCells();
  inline  ::capnp::List< ::uint32_t>::Builder getActiveCells();
  inline void setActiveCells( ::capnp::List< ::uint32_t>::Reader value);
  inline void setActiveCells(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initActiveCells(unsigned int size);
  inline void adoptActiveCells(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownActiveCells();

  inline bool hasWinnerCells();
  inline  ::capnp::List< ::uint32_t>::Builder getWinnerCells();
  inline void setWinnerCells( ::capnp::List< ::uint32_t>::Reader value);
  inline void setWinnerCells(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initWinnerCells(unsigned int size);
  inline void adoptWinnerCells(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownWinnerCells();

  inline bool hasPredictedActiveCells();
  inline  ::capnp::List< ::uint32_t>::Builder getPredictedActiveCells();
  inline void setPredictedActiveCells( ::capnp::List< ::uint32_t>::Reader value);
  inline void setPredictedActiveCells(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initPredictedActiveCells(unsigned int size);
  inline void adoptPredictedActiveCells(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownPredictedActiveCells();

  inline bool hasActiveBasalSegments();
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder getActiveBasalSegments();
  inline void setActiveBasalSegments( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader value);
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder initActiveBasalSegments(unsigned int size);
  inline void adoptActiveBasalSegments(::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>> disownActiveBasalSegments();

  inline bool hasMatchingBasalSegments();
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder getMatchingBasalSegments();
  inline void setMatchingBasalSegments( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader value);
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder initMatchingBasalSegments(unsigned int size);
  inline void adoptMatchingBasalSegments(::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>> disownMatchingBasalSegments();

  inline bool hasActiveApicalSegments();
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder getActiveApicalSegments();
  inline void setActiveApicalSegments( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader value);
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder initActiveApicalSegments(unsigned int size);
  inline void adoptActiveApicalSegments(::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>> disownActiveApicalSegments();

  inline bool hasMatchingApicalSegments();
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder getMatchingApicalSegments();
  inline void setMatchingApicalSegments( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader value);
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder initMatchingApicalSegments(unsigned int size);
  inline void adoptMatchingApicalSegments(::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>> disownMatchingApicalSegments();

  inline bool hasNumActivePotentialSynapsesForBasalSegment();
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Builder getNumActivePotentialSynapsesForBasalSegment();
  inline void setNumActivePotentialSynapsesForBasalSegment( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Reader value);
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Builder initNumActivePotentialSynapsesForBasalSegment(unsigned int size);
  inline void adoptNumActivePotentialSynapsesForBasalSegment(::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>> disownNumActivePotentialSynapsesForBasalSegment();

  inline bool hasNumActivePotentialSynapsesForApicalSegment();
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Builder getNumActivePotentialSynapsesForApicalSegment();
  inline void setNumActivePotentialSynapsesForApicalSegment( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Reader value);
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Builder initNumActivePotentialSynapsesForApicalSegment(unsigned int size);
  inline void adoptNumActivePotentialSynapsesForApicalSegment(::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>> disownNumActivePotentialSynapsesForApicalSegment();

  inline  ::uint64_t getIteration();
  inline void setIteration( ::uint64_t value);

  inline bool hasLastUsedIterationForBasalSegment();
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Builder getLastUsedIterationForBasalSegment();
  inline void setLastUsedIterationForBasalSegment( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Reader value);
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Builder initLastUsedIterationForBasalSegment(unsigned int size);
  inline void adoptLastUsedIterationForBasalSegment(::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>> disownLastUsedIterationForBasalSegment();

  inline bool hasLastUsedIterationForApicalSegment();
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Builder getLastUsedIterationForApicalSegment();
  inline void setLastUsedIterationForApicalSegment( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Reader value);
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Builder initLastUsedIterationForApicalSegment(unsigned int size);
  inline void adoptLastUsedIterationForApicalSegment(::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>> disownLastUsedIterationForApicalSegment();

  inline bool getLearnOnOneCell();
  inline void setLearnOnOneCell(bool value);

  inline bool hasChosenCellForColumn();
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>::Builder getChosenCellForColumn();
  inline void setChosenCellForColumn( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>::Reader value);
  inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>::Builder initChosenCellForColumn(unsigned int size);
  inline void adoptChosenCellForColumn(::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>> disownChosenCellForColumn();

  inline bool hasPredictedCells();
  inline  ::capnp::List< ::uint32_t>::Builder getPredictedCells();
  inline void setPredictedCells( ::capnp::List< ::uint32_t>::Reader value);
  inline void setPredictedCells(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initPredictedCells(unsigned int size);
  inline void adoptPredictedCells(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownPredictedCells();

  inline  ::uint32_t getBasalInputSize();
  inline void setBasalInputSize( ::uint32_t value);

  inline  ::uint32_t getApicalInputSize();
  inline void setApicalInputSize( ::uint32_t value);

  inline float getApicalPredictedSegmentDecrement();
  inline void setApicalPredictedSegmentDecrement(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ApicalTiebreakTemporalMemoryProto::Pipeline {
public:
  typedef ApicalTiebreakTemporalMemoryProto Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ConnectionsProto::Pipeline getBasalConnections();
  inline  ::ConnectionsProto::Pipeline getApicalConnections();
  inline  ::RandomProto::Pipeline getRandom();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ApicalTiebreakTemporalMemoryProto::SegmentPath::Reader {
public:
  typedef SegmentPath Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCell() const;

  inline  ::uint32_t getIdxOnCell() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ApicalTiebreakTemporalMemoryProto::SegmentPath::Builder {
public:
  typedef SegmentPath Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCell();
  inline void setCell( ::uint32_t value);

  inline  ::uint32_t getIdxOnCell();
  inline void setIdxOnCell( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ApicalTiebreakTemporalMemoryProto::SegmentPath::Pipeline {
public:
  typedef SegmentPath Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair::Reader {
public:
  typedef SegmentUInt32Pair Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCell() const;

  inline  ::uint32_t getIdxOnCell() const;

  inline  ::uint32_t getNumber() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair::Builder {
public:
  typedef SegmentUInt32Pair Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCell();
  inline void setCell( ::uint32_t value);

  inline  ::uint32_t getIdxOnCell();
  inline void setIdxOnCell( ::uint32_t value);

  inline  ::uint32_t getNumber();
  inline void setNumber( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair::Pipeline {
public:
  typedef SegmentUInt32Pair Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair::Reader {
public:
  typedef SegmentUInt64Pair Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCell() const;

  inline  ::uint32_t getIdxOnCell() const;

  inline  ::uint64_t getNumber() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair::Builder {
public:
  typedef SegmentUInt64Pair Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCell();
  inline void setCell( ::uint32_t value);

  inline  ::uint32_t getIdxOnCell();
  inline void setIdxOnCell( ::uint32_t value);

  inline  ::uint64_t getNumber();
  inline void setNumber( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair::Pipeline {
public:
  typedef SegmentUInt64Pair Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ApicalTiebreakTemporalMemoryProto::ChosenCellPair::Reader {
public:
  typedef ChosenCellPair Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getColumnIdx() const;

  inline  ::uint32_t getCellIdx() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ApicalTiebreakTemporalMemoryProto::ChosenCellPair::Builder {
public:
  typedef ChosenCellPair Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getColumnIdx();
  inline void setColumnIdx( ::uint32_t value);

  inline  ::uint32_t getCellIdx();
  inline void setCellIdx( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ApicalTiebreakTemporalMemoryProto::ChosenCellPair::Pipeline {
public:
  typedef ChosenCellPair Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ApicalTiebreakSequenceMemoryProto::Reader {
public:
  typedef ApicalTiebreakSequenceMemoryProto Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasApicalTiebreakTemporalMemory() const;
  inline  ::ApicalTiebreakTemporalMemoryProto::Reader getApicalTiebreakTemporalMemory() const;

  inline bool hasPrevApicalInput() const;
  inline  ::capnp::List< ::uint32_t>::Reader getPrevApicalInput() const;

  inline bool hasPrevApicalGrowthCandidates() const;
  inline  ::capnp::List< ::uint32_t>::Reader getPrevApicalGrowthCandidates() const;

  inline bool hasPrevPredictedCells() const;
  inline  ::capnp::List< ::uint32_t>::Reader getPrevPredictedCells() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ApicalTiebreakSequenceMemoryProto::Builder {
public:
  typedef ApicalTiebreakSequenceMemoryProto Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasApicalTiebreakTemporalMemory();
  inline  ::ApicalTiebreakTemporalMemoryProto::Builder getApicalTiebreakTemporalMemory();
  inline void setApicalTiebreakTemporalMemory( ::ApicalTiebreakTemporalMemoryProto::Reader value);
  inline  ::ApicalTiebreakTemporalMemoryProto::Builder initApicalTiebreakTemporalMemory();
  inline void adoptApicalTiebreakTemporalMemory(::capnp::Orphan< ::ApicalTiebreakTemporalMemoryProto>&& value);
  inline ::capnp::Orphan< ::ApicalTiebreakTemporalMemoryProto> disownApicalTiebreakTemporalMemory();

  inline bool hasPrevApicalInput();
  inline  ::capnp::List< ::uint32_t>::Builder getPrevApicalInput();
  inline void setPrevApicalInput( ::capnp::List< ::uint32_t>::Reader value);
  inline void setPrevApicalInput(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initPrevApicalInput(unsigned int size);
  inline void adoptPrevApicalInput(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownPrevApicalInput();

  inline bool hasPrevApicalGrowthCandidates();
  inline  ::capnp::List< ::uint32_t>::Builder getPrevApicalGrowthCandidates();
  inline void setPrevApicalGrowthCandidates( ::capnp::List< ::uint32_t>::Reader value);
  inline void setPrevApicalGrowthCandidates(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initPrevApicalGrowthCandidates(unsigned int size);
  inline void adoptPrevApicalGrowthCandidates(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownPrevApicalGrowthCandidates();

  inline bool hasPrevPredictedCells();
  inline  ::capnp::List< ::uint32_t>::Builder getPrevPredictedCells();
  inline void setPrevPredictedCells( ::capnp::List< ::uint32_t>::Reader value);
  inline void setPrevPredictedCells(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initPrevPredictedCells(unsigned int size);
  inline void adoptPrevPredictedCells(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownPrevPredictedCells();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ApicalTiebreakSequenceMemoryProto::Pipeline {
public:
  typedef ApicalTiebreakSequenceMemoryProto Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ApicalTiebreakTemporalMemoryProto::Pipeline getApicalTiebreakTemporalMemory();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::Reader::getColumnCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::Builder::getColumnCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setColumnCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::Reader::getCellsPerColumn() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::Builder::getCellsPerColumn() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setCellsPerColumn( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::Reader::getActivationThreshold() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::Builder::getActivationThreshold() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setActivationThreshold( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ApicalTiebreakTemporalMemoryProto::Reader::getInitialPermanence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ApicalTiebreakTemporalMemoryProto::Builder::getInitialPermanence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setInitialPermanence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ApicalTiebreakTemporalMemoryProto::Reader::getConnectedPermanence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ApicalTiebreakTemporalMemoryProto::Builder::getConnectedPermanence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setConnectedPermanence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::Reader::getMinThreshold() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::Builder::getMinThreshold() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setMinThreshold( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::Reader::getSampleSize() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::Builder::getSampleSize() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setSampleSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ApicalTiebreakTemporalMemoryProto::Reader::getPermanenceIncrement() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ApicalTiebreakTemporalMemoryProto::Builder::getPermanenceIncrement() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setPermanenceIncrement(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ApicalTiebreakTemporalMemoryProto::Reader::getPermanenceDecrement() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ApicalTiebreakTemporalMemoryProto::Builder::getPermanenceDecrement() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setPermanenceDecrement(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float ApicalTiebreakTemporalMemoryProto::Reader::getBasalPredictedSegmentDecrement() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float ApicalTiebreakTemporalMemoryProto::Builder::getBasalPredictedSegmentDecrement() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setBasalPredictedSegmentDecrement(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ApicalTiebreakTemporalMemoryProto::Reader::getMaxSegmentsPerCell() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ApicalTiebreakTemporalMemoryProto::Builder::getMaxSegmentsPerCell() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setMaxSegmentsPerCell( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ApicalTiebreakTemporalMemoryProto::Reader::getMaxSynapsesPerSegment() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ApicalTiebreakTemporalMemoryProto::Builder::getMaxSynapsesPerSegment() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setMaxSynapsesPerSegment( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::getFormInternalBasalConnections() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<352>() * ::capnp::ELEMENTS);
}

inline bool ApicalTiebreakTemporalMemoryProto::Builder::getFormInternalBasalConnections() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<352>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setFormInternalBasalConnections(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<352>() * ::capnp::ELEMENTS, value);
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasBasalConnections() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasBasalConnections() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ConnectionsProto::Reader ApicalTiebreakTemporalMemoryProto::Reader::getBasalConnections() const {
  return ::capnp::_::PointerHelpers< ::ConnectionsProto>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ConnectionsProto::Builder ApicalTiebreakTemporalMemoryProto::Builder::getBasalConnections() {
  return ::capnp::_::PointerHelpers< ::ConnectionsProto>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ConnectionsProto::Pipeline ApicalTiebreakTemporalMemoryProto::Pipeline::getBasalConnections() {
  return  ::ConnectionsProto::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ApicalTiebreakTemporalMemoryProto::Builder::setBasalConnections( ::ConnectionsProto::Reader value) {
  ::capnp::_::PointerHelpers< ::ConnectionsProto>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ConnectionsProto::Builder ApicalTiebreakTemporalMemoryProto::Builder::initBasalConnections() {
  return ::capnp::_::PointerHelpers< ::ConnectionsProto>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptBasalConnections(
    ::capnp::Orphan< ::ConnectionsProto>&& value) {
  ::capnp::_::PointerHelpers< ::ConnectionsProto>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ConnectionsProto> ApicalTiebreakTemporalMemoryProto::Builder::disownBasalConnections() {
  return ::capnp::_::PointerHelpers< ::ConnectionsProto>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasApicalConnections() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasApicalConnections() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::ConnectionsProto::Reader ApicalTiebreakTemporalMemoryProto::Reader::getApicalConnections() const {
  return ::capnp::_::PointerHelpers< ::ConnectionsProto>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::ConnectionsProto::Builder ApicalTiebreakTemporalMemoryProto::Builder::getApicalConnections() {
  return ::capnp::_::PointerHelpers< ::ConnectionsProto>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ConnectionsProto::Pipeline ApicalTiebreakTemporalMemoryProto::Pipeline::getApicalConnections() {
  return  ::ConnectionsProto::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ApicalTiebreakTemporalMemoryProto::Builder::setApicalConnections( ::ConnectionsProto::Reader value) {
  ::capnp::_::PointerHelpers< ::ConnectionsProto>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::ConnectionsProto::Builder ApicalTiebreakTemporalMemoryProto::Builder::initApicalConnections() {
  return ::capnp::_::PointerHelpers< ::ConnectionsProto>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptApicalConnections(
    ::capnp::Orphan< ::ConnectionsProto>&& value) {
  ::capnp::_::PointerHelpers< ::ConnectionsProto>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ConnectionsProto> ApicalTiebreakTemporalMemoryProto::Builder::disownApicalConnections() {
  return ::capnp::_::PointerHelpers< ::ConnectionsProto>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasRandom() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasRandom() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::RandomProto::Reader ApicalTiebreakTemporalMemoryProto::Reader::getRandom() const {
  return ::capnp::_::PointerHelpers< ::RandomProto>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::RandomProto::Builder ApicalTiebreakTemporalMemoryProto::Builder::getRandom() {
  return ::capnp::_::PointerHelpers< ::RandomProto>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RandomProto::Pipeline ApicalTiebreakTemporalMemoryProto::Pipeline::getRandom() {
  return  ::RandomProto::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ApicalTiebreakTemporalMemoryProto::Builder::setRandom( ::RandomProto::Reader value) {
  ::capnp::_::PointerHelpers< ::RandomProto>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::RandomProto::Builder ApicalTiebreakTemporalMemoryProto::Builder::initRandom() {
  return ::capnp::_::PointerHelpers< ::RandomProto>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptRandom(
    ::capnp::Orphan< ::RandomProto>&& value) {
  ::capnp::_::PointerHelpers< ::RandomProto>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RandomProto> ApicalTiebreakTemporalMemoryProto::Builder::disownRandom() {
  return ::capnp::_::PointerHelpers< ::RandomProto>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasActiveCells() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasActiveCells() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader ApicalTiebreakTemporalMemoryProto::Reader::getActiveCells() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder ApicalTiebreakTemporalMemoryProto::Builder::getActiveCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setActiveCells( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setActiveCells(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder ApicalTiebreakTemporalMemoryProto::Builder::initActiveCells(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptActiveCells(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> ApicalTiebreakTemporalMemoryProto::Builder::disownActiveCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasWinnerCells() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasWinnerCells() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader ApicalTiebreakTemporalMemoryProto::Reader::getWinnerCells() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder ApicalTiebreakTemporalMemoryProto::Builder::getWinnerCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setWinnerCells( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setWinnerCells(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder ApicalTiebreakTemporalMemoryProto::Builder::initWinnerCells(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptWinnerCells(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> ApicalTiebreakTemporalMemoryProto::Builder::disownWinnerCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasPredictedActiveCells() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasPredictedActiveCells() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader ApicalTiebreakTemporalMemoryProto::Reader::getPredictedActiveCells() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder ApicalTiebreakTemporalMemoryProto::Builder::getPredictedActiveCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setPredictedActiveCells( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setPredictedActiveCells(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder ApicalTiebreakTemporalMemoryProto::Builder::initPredictedActiveCells(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptPredictedActiveCells(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> ApicalTiebreakTemporalMemoryProto::Builder::disownPredictedActiveCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasActiveBasalSegments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasActiveBasalSegments() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader ApicalTiebreakTemporalMemoryProto::Reader::getActiveBasalSegments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder ApicalTiebreakTemporalMemoryProto::Builder::getActiveBasalSegments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setActiveBasalSegments( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder ApicalTiebreakTemporalMemoryProto::Builder::initActiveBasalSegments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptActiveBasalSegments(
    ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>> ApicalTiebreakTemporalMemoryProto::Builder::disownActiveBasalSegments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasMatchingBasalSegments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasMatchingBasalSegments() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader ApicalTiebreakTemporalMemoryProto::Reader::getMatchingBasalSegments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder ApicalTiebreakTemporalMemoryProto::Builder::getMatchingBasalSegments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setMatchingBasalSegments( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder ApicalTiebreakTemporalMemoryProto::Builder::initMatchingBasalSegments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptMatchingBasalSegments(
    ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>> ApicalTiebreakTemporalMemoryProto::Builder::disownMatchingBasalSegments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasActiveApicalSegments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasActiveApicalSegments() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader ApicalTiebreakTemporalMemoryProto::Reader::getActiveApicalSegments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder ApicalTiebreakTemporalMemoryProto::Builder::getActiveApicalSegments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setActiveApicalSegments( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder ApicalTiebreakTemporalMemoryProto::Builder::initActiveApicalSegments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptActiveApicalSegments(
    ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>> ApicalTiebreakTemporalMemoryProto::Builder::disownActiveApicalSegments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasMatchingApicalSegments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasMatchingApicalSegments() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader ApicalTiebreakTemporalMemoryProto::Reader::getMatchingApicalSegments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder ApicalTiebreakTemporalMemoryProto::Builder::getMatchingApicalSegments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setMatchingApicalSegments( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>::Builder ApicalTiebreakTemporalMemoryProto::Builder::initMatchingApicalSegments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptMatchingApicalSegments(
    ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>> ApicalTiebreakTemporalMemoryProto::Builder::disownMatchingApicalSegments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentPath>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasNumActivePotentialSynapsesForBasalSegment() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasNumActivePotentialSynapsesForBasalSegment() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Reader ApicalTiebreakTemporalMemoryProto::Reader::getNumActivePotentialSynapsesForBasalSegment() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Builder ApicalTiebreakTemporalMemoryProto::Builder::getNumActivePotentialSynapsesForBasalSegment() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setNumActivePotentialSynapsesForBasalSegment( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Builder ApicalTiebreakTemporalMemoryProto::Builder::initNumActivePotentialSynapsesForBasalSegment(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptNumActivePotentialSynapsesForBasalSegment(
    ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>> ApicalTiebreakTemporalMemoryProto::Builder::disownNumActivePotentialSynapsesForBasalSegment() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasNumActivePotentialSynapsesForApicalSegment() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasNumActivePotentialSynapsesForApicalSegment() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Reader ApicalTiebreakTemporalMemoryProto::Reader::getNumActivePotentialSynapsesForApicalSegment() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Builder ApicalTiebreakTemporalMemoryProto::Builder::getNumActivePotentialSynapsesForApicalSegment() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setNumActivePotentialSynapsesForApicalSegment( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>::Builder ApicalTiebreakTemporalMemoryProto::Builder::initNumActivePotentialSynapsesForApicalSegment(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptNumActivePotentialSynapsesForApicalSegment(
    ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>> ApicalTiebreakTemporalMemoryProto::Builder::disownNumActivePotentialSynapsesForApicalSegment() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline  ::uint64_t ApicalTiebreakTemporalMemoryProto::Reader::getIteration() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ApicalTiebreakTemporalMemoryProto::Builder::getIteration() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setIteration( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasLastUsedIterationForBasalSegment() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasLastUsedIterationForBasalSegment() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Reader ApicalTiebreakTemporalMemoryProto::Reader::getLastUsedIterationForBasalSegment() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Builder ApicalTiebreakTemporalMemoryProto::Builder::getLastUsedIterationForBasalSegment() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setLastUsedIterationForBasalSegment( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Builder ApicalTiebreakTemporalMemoryProto::Builder::initLastUsedIterationForBasalSegment(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptLastUsedIterationForBasalSegment(
    ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>> ApicalTiebreakTemporalMemoryProto::Builder::disownLastUsedIterationForBasalSegment() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasLastUsedIterationForApicalSegment() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasLastUsedIterationForApicalSegment() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Reader ApicalTiebreakTemporalMemoryProto::Reader::getLastUsedIterationForApicalSegment() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Builder ApicalTiebreakTemporalMemoryProto::Builder::getLastUsedIterationForApicalSegment() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setLastUsedIterationForApicalSegment( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>::Builder ApicalTiebreakTemporalMemoryProto::Builder::initLastUsedIterationForApicalSegment(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptLastUsedIterationForApicalSegment(
    ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>> ApicalTiebreakTemporalMemoryProto::Builder::disownLastUsedIterationForApicalSegment() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::getLearnOnOneCell() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<353>() * ::capnp::ELEMENTS);
}

inline bool ApicalTiebreakTemporalMemoryProto::Builder::getLearnOnOneCell() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<353>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setLearnOnOneCell(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<353>() * ::capnp::ELEMENTS, value);
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasChosenCellForColumn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasChosenCellForColumn() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>::Reader ApicalTiebreakTemporalMemoryProto::Reader::getChosenCellForColumn() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>::Builder ApicalTiebreakTemporalMemoryProto::Builder::getChosenCellForColumn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setChosenCellForColumn( ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>::Builder ApicalTiebreakTemporalMemoryProto::Builder::initChosenCellForColumn(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptChosenCellForColumn(
    ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>> ApicalTiebreakTemporalMemoryProto::Builder::disownChosenCellForColumn() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ApicalTiebreakTemporalMemoryProto::ChosenCellPair>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakTemporalMemoryProto::Reader::hasPredictedCells() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakTemporalMemoryProto::Builder::hasPredictedCells() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader ApicalTiebreakTemporalMemoryProto::Reader::getPredictedCells() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder ApicalTiebreakTemporalMemoryProto::Builder::getPredictedCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setPredictedCells( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setPredictedCells(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder ApicalTiebreakTemporalMemoryProto::Builder::initPredictedCells(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::adoptPredictedCells(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> ApicalTiebreakTemporalMemoryProto::Builder::disownPredictedCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::Reader::getBasalInputSize() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::Builder::getBasalInputSize() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setBasalInputSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::Reader::getApicalInputSize() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::Builder::getApicalInputSize() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setApicalInputSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float ApicalTiebreakTemporalMemoryProto::Reader::getApicalPredictedSegmentDecrement() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float ApicalTiebreakTemporalMemoryProto::Builder::getApicalPredictedSegmentDecrement() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::Builder::setApicalPredictedSegmentDecrement(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::SegmentPath::Reader::getCell() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::SegmentPath::Builder::getCell() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::SegmentPath::Builder::setCell( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::SegmentPath::Reader::getIdxOnCell() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::SegmentPath::Builder::getIdxOnCell() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::SegmentPath::Builder::setIdxOnCell( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair::Reader::getCell() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair::Builder::getCell() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair::Builder::setCell( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair::Reader::getIdxOnCell() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair::Builder::getIdxOnCell() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair::Builder::setIdxOnCell( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair::Reader::getNumber() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair::Builder::getNumber() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::SegmentUInt32Pair::Builder::setNumber( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair::Reader::getCell() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair::Builder::getCell() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair::Builder::setCell( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair::Reader::getIdxOnCell() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair::Builder::getIdxOnCell() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair::Builder::setIdxOnCell( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair::Reader::getNumber() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair::Builder::getNumber() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::SegmentUInt64Pair::Builder::setNumber( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::ChosenCellPair::Reader::getColumnIdx() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::ChosenCellPair::Builder::getColumnIdx() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::ChosenCellPair::Builder::setColumnIdx( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::ChosenCellPair::Reader::getCellIdx() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ApicalTiebreakTemporalMemoryProto::ChosenCellPair::Builder::getCellIdx() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ApicalTiebreakTemporalMemoryProto::ChosenCellPair::Builder::setCellIdx( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ApicalTiebreakSequenceMemoryProto::Reader::hasApicalTiebreakTemporalMemory() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakSequenceMemoryProto::Builder::hasApicalTiebreakTemporalMemory() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ApicalTiebreakTemporalMemoryProto::Reader ApicalTiebreakSequenceMemoryProto::Reader::getApicalTiebreakTemporalMemory() const {
  return ::capnp::_::PointerHelpers< ::ApicalTiebreakTemporalMemoryProto>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ApicalTiebreakTemporalMemoryProto::Builder ApicalTiebreakSequenceMemoryProto::Builder::getApicalTiebreakTemporalMemory() {
  return ::capnp::_::PointerHelpers< ::ApicalTiebreakTemporalMemoryProto>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ApicalTiebreakTemporalMemoryProto::Pipeline ApicalTiebreakSequenceMemoryProto::Pipeline::getApicalTiebreakTemporalMemory() {
  return  ::ApicalTiebreakTemporalMemoryProto::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ApicalTiebreakSequenceMemoryProto::Builder::setApicalTiebreakTemporalMemory( ::ApicalTiebreakTemporalMemoryProto::Reader value) {
  ::capnp::_::PointerHelpers< ::ApicalTiebreakTemporalMemoryProto>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ApicalTiebreakTemporalMemoryProto::Builder ApicalTiebreakSequenceMemoryProto::Builder::initApicalTiebreakTemporalMemory() {
  return ::capnp::_::PointerHelpers< ::ApicalTiebreakTemporalMemoryProto>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakSequenceMemoryProto::Builder::adoptApicalTiebreakTemporalMemory(
    ::capnp::Orphan< ::ApicalTiebreakTemporalMemoryProto>&& value) {
  ::capnp::_::PointerHelpers< ::ApicalTiebreakTemporalMemoryProto>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ApicalTiebreakTemporalMemoryProto> ApicalTiebreakSequenceMemoryProto::Builder::disownApicalTiebreakTemporalMemory() {
  return ::capnp::_::PointerHelpers< ::ApicalTiebreakTemporalMemoryProto>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakSequenceMemoryProto::Reader::hasPrevApicalInput() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakSequenceMemoryProto::Builder::hasPrevApicalInput() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader ApicalTiebreakSequenceMemoryProto::Reader::getPrevApicalInput() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder ApicalTiebreakSequenceMemoryProto::Builder::getPrevApicalInput() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakSequenceMemoryProto::Builder::setPrevApicalInput( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ApicalTiebreakSequenceMemoryProto::Builder::setPrevApicalInput(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder ApicalTiebreakSequenceMemoryProto::Builder::initPrevApicalInput(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakSequenceMemoryProto::Builder::adoptPrevApicalInput(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> ApicalTiebreakSequenceMemoryProto::Builder::disownPrevApicalInput() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakSequenceMemoryProto::Reader::hasPrevApicalGrowthCandidates() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakSequenceMemoryProto::Builder::hasPrevApicalGrowthCandidates() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader ApicalTiebreakSequenceMemoryProto::Reader::getPrevApicalGrowthCandidates() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder ApicalTiebreakSequenceMemoryProto::Builder::getPrevApicalGrowthCandidates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakSequenceMemoryProto::Builder::setPrevApicalGrowthCandidates( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ApicalTiebreakSequenceMemoryProto::Builder::setPrevApicalGrowthCandidates(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder ApicalTiebreakSequenceMemoryProto::Builder::initPrevApicalGrowthCandidates(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakSequenceMemoryProto::Builder::adoptPrevApicalGrowthCandidates(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> ApicalTiebreakSequenceMemoryProto::Builder::disownPrevApicalGrowthCandidates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ApicalTiebreakSequenceMemoryProto::Reader::hasPrevPredictedCells() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ApicalTiebreakSequenceMemoryProto::Builder::hasPrevPredictedCells() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader ApicalTiebreakSequenceMemoryProto::Reader::getPrevPredictedCells() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder ApicalTiebreakSequenceMemoryProto::Builder::getPrevPredictedCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ApicalTiebreakSequenceMemoryProto::Builder::setPrevPredictedCells( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void ApicalTiebreakSequenceMemoryProto::Builder::setPrevPredictedCells(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder ApicalTiebreakSequenceMemoryProto::Builder::initPrevPredictedCells(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ApicalTiebreakSequenceMemoryProto::Builder::adoptPrevPredictedCells(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> ApicalTiebreakSequenceMemoryProto::Builder::disownPrevPredictedCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_e6601be8ebc25c9b_
